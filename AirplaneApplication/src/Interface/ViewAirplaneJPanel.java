/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Airplane.Airplane;
import Airplane.AirplaneCatalog;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Menita Koonani
 */
public class ViewAirplaneJPanel extends javax.swing.JPanel {

    /**
     * Creates new form viewAirplaneJPanel
     */
    private AirplaneCatalog airplaneCatalog;

    public ViewAirplaneJPanel(AirplaneCatalog airplaneCatalog, int criteriaType) {
        initComponents();
        this.airplaneCatalog = airplaneCatalog;
        populateTable();
    }

    public void populateTable() {
        ArrayList<Airplane> airplaneList = airplaneCatalog.getAirplanesList();
        DefaultTableModel airplaneTable = (DefaultTableModel) viewAirplaneTable.getModel();
        airplaneTable.setNumRows(0);
        //starting the population form row 0
        airplaneTable.setRowCount(0);
        for (Airplane eachAirplane : airplaneList) {
            Object row[] = new Object[3];
            //setting the object to the first row as we need to access all the other attributes of that particular object
            row[0] = eachAirplane;
            row[1] = eachAirplane.getAirplaneName();
            row[2] = eachAirplane.getSeatsAvailable();
            airplaneTable.addRow(row);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        viewPanelHeader = new javax.swing.JLabel();
        viewScrollPane = new javax.swing.JScrollPane();
        viewAirplaneTable = new javax.swing.JTable();
        viewDetailsBtn = new javax.swing.JButton();
        serialNumberLabel = new javax.swing.JLabel();
        serailNumberField = new javax.swing.JTextField();
        modelNumberLabel = new javax.swing.JLabel();
        modelNumberField = new javax.swing.JTextField();
        airplaneNameLabel = new javax.swing.JLabel();
        airplaneNameField = new javax.swing.JTextField();
        airplaneAvailableLabel = new javax.swing.JLabel();
        manufacturerNameLabel = new javax.swing.JLabel();
        manufacturerNameField = new javax.swing.JTextField();
        yearManuLabel = new javax.swing.JLabel();
        seatsAvailLabel = new javax.swing.JLabel();
        airportNameLabel = new javax.swing.JLabel();
        airportNameField = new javax.swing.JTextField();
        updateAirplaneBtn = new javax.swing.JButton();
        planeAvailable = new javax.swing.JCheckBox();
        planeUnavailable = new javax.swing.JCheckBox();
        yearManuChooser = new com.toedter.calendar.JYearChooser();
        seatsAvailChooser = new com.toedter.components.JSpinField();
        updateChangesBtn = new javax.swing.JButton();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        viewPanelHeader.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        viewPanelHeader.setText("View Airplane Details");
        add(viewPanelHeader, new org.netbeans.lib.awtextra.AbsoluteConstraints(304, 39, -1, -1));

        viewAirplaneTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Airplane Serial Number", "Airplane Name", "Seats available"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        viewScrollPane.setViewportView(viewAirplaneTable);

        add(viewScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 86, 462, 190));

        viewDetailsBtn.setText("View Details");
        viewDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDetailsBtnActionPerformed(evt);
            }
        });
        add(viewDetailsBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(434, 294, -1, -1));

        serialNumberLabel.setText("Airplane Serial  Number:");
        add(serialNumberLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(229, 338, -1, -1));

        serailNumberField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        add(serailNumberField, new org.netbeans.lib.awtextra.AbsoluteConstraints(408, 335, 211, -1));

        modelNumberLabel.setText("Airplane Model Number:");
        add(modelNumberLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(229, 376, -1, -1));
        add(modelNumberField, new org.netbeans.lib.awtextra.AbsoluteConstraints(408, 373, 211, -1));

        airplaneNameLabel.setText("Airplane Name:");
        add(airplaneNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(271, 414, -1, -1));
        add(airplaneNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(408, 411, 211, -1));

        airplaneAvailableLabel.setText("Is the airplane available:");
        add(airplaneAvailableLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(226, 453, -1, -1));

        manufacturerNameLabel.setText("Airplane manufacturer name:");
        add(manufacturerNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(204, 493, -1, -1));
        add(manufacturerNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(408, 490, 211, -1));

        yearManuLabel.setText("Year of manufacture:");
        add(yearManuLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(241, 534, -1, -1));

        seatsAvailLabel.setText("Number of seats available:");
        add(seatsAvailLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(216, 572, -1, -1));

        airportNameLabel.setText("Airport Name:");
        add(airportNameLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(277, 607, -1, -1));
        add(airportNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(408, 604, 211, -1));

        updateAirplaneBtn.setText("Update");
        updateAirplaneBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateAirplaneBtnActionPerformed(evt);
            }
        });
        add(updateAirplaneBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(541, 294, 101, -1));

        planeAvailable.setSelected(true);
        planeAvailable.setText("Yes");
        add(planeAvailable, new org.netbeans.lib.awtextra.AbsoluteConstraints(424, 449, -1, -1));

        planeUnavailable.setText("No");
        add(planeUnavailable, new org.netbeans.lib.awtextra.AbsoluteConstraints(539, 449, -1, -1));

        yearManuChooser.setEndYear(2017);
        yearManuChooser.setMinimum(1990);
        yearManuChooser.setName("yearOfManu"); // NOI18N
        add(yearManuChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(408, 528, 67, -1));

        seatsAvailChooser.setMaximum(550);
        seatsAvailChooser.setMinimum(0);
        seatsAvailChooser.setName("seatsAvailable"); // NOI18N
        seatsAvailChooser.setValue(550);
        add(seatsAvailChooser, new org.netbeans.lib.awtextra.AbsoluteConstraints(408, 566, 67, -1));

        updateChangesBtn.setText("Update changes");
        updateChangesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateChangesBtnActionPerformed(evt);
            }
        });
        add(updateChangesBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(349, 652, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void viewDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDetailsBtnActionPerformed
        // TODO add your handling code here:
        populateAirplaneViewDetails(false);
        updateChangesBtn.setVisible(false);
    }//GEN-LAST:event_viewDetailsBtnActionPerformed
    public void isEdittable(boolean isEdittable) {
        serailNumberField.setEditable(isEdittable);
        modelNumberField.setEditable(isEdittable);
        airplaneNameField.setEditable(isEdittable);
        planeAvailable.setEnabled(isEdittable);
        planeUnavailable.setEnabled(isEdittable);
        serailNumberField.setEditable(isEdittable);
        yearManuChooser.setEnabled(isEdittable);
        seatsAvailChooser.setEnabled(isEdittable);
        airportNameField.setEditable(isEdittable);
    }

    private void populateAirplaneViewDetails(boolean isEdittable) {
        isEdittable(isEdittable);
        int selectedRow = viewAirplaneTable.getSelectedRow();
        if (selectedRow >= 0) {
            Airplane airplane = (Airplane) viewAirplaneTable.getValueAt(selectedRow, 0);
            serailNumberField.setText(String.valueOf(airplane.getSerialNumber()));
            modelNumberField.setText(String.valueOf(airplane.getModelNumber()));
            airplaneNameField.setText(String.valueOf(airplane.getAirplaneName()));
            if(airplane.isAvailable())
            {
                planeAvailable.setSelected(true);
            }
            else
            {
                planeUnavailable.setSelected(false); 
            }
            manufacturerNameField.setText(String.valueOf(airplane.getManufacturerName()));
            yearManuChooser.setYear(airplane.getYearOfManufacture());
            seatsAvailChooser.setValue(airplane.getSeatsAvailable());
            airportNameField.setText(String.valueOf(airplane.getAirportName()));
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row!!");
        }
    }
    private void updateAirplaneBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateAirplaneBtnActionPerformed
        // TODO add your handling code here:
        populateAirplaneViewDetails(true);
        updateChangesBtn.setVisible(true);
    }//GEN-LAST:event_updateAirplaneBtnActionPerformed

    private void updateChangesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateChangesBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = viewAirplaneTable.getSelectedRow();
        if (selectedRow >= 0) {
            Airplane airplane = (Airplane) viewAirplaneTable.getValueAt(selectedRow, 0);
            getViewFieldsFromPanel(airplane);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row!!");
        }
    }//GEN-LAST:event_updateChangesBtnActionPerformed

    public void getViewFieldsFromPanel(Airplane airplane) {
        try {
            Long serialNumber = Long.parseLong(serailNumberField.getText());
            String modelNumber = modelNumberField.getText();
            String airplaneName = airplaneNameField.getText();
            boolean isAvailable = planeAvailable.isSelected();
            String manufacturerName = manufacturerNameField.getText();
            int yearManu = yearManuChooser.getYear();
            int seatsAvailable = seatsAvailChooser.getValue();
            String airportName = airportNameField.getText();

            airplane.setSerialNumber(serialNumber);
            airplane.setModelNumber(modelNumber);
            airplane.setAirplaneName(airplaneName);
            airplane.setIsAvailable(isAvailable);
            airplane.setManufacturerName(manufacturerName);
            airplane.setYearOfManufacture(yearManu);
            airplane.setSeatsAvailable(seatsAvailable);
            airplane.setAirportName(airportName);
            
            JOptionPane.showMessageDialog(null, "Updated!!");
            resetViewFields();
            isEdittable(false);
            populateTable();
            
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Invalid Serial Number : Serial Number field can contian only numbers!! Please try again!");
            serailNumberField.requestFocus();
        }
    }
    public void resetViewFields() {
        serailNumberField.setText("");
        modelNumberField.setText("");
        airplaneNameField.setText("");
        planeAvailable.setSelected(true);
        manufacturerNameField.setText("");
        yearManuChooser.setYear(2017);
        seatsAvailChooser.setValue(550);
        airportNameField.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel airplaneAvailableLabel;
    private javax.swing.JTextField airplaneNameField;
    private javax.swing.JLabel airplaneNameLabel;
    private javax.swing.JTextField airportNameField;
    private javax.swing.JLabel airportNameLabel;
    private javax.swing.JTextField manufacturerNameField;
    private javax.swing.JLabel manufacturerNameLabel;
    private javax.swing.JTextField modelNumberField;
    private javax.swing.JLabel modelNumberLabel;
    private javax.swing.JCheckBox planeAvailable;
    private javax.swing.JCheckBox planeUnavailable;
    private com.toedter.components.JSpinField seatsAvailChooser;
    private javax.swing.JLabel seatsAvailLabel;
    private javax.swing.JTextField serailNumberField;
    private javax.swing.JLabel serialNumberLabel;
    private javax.swing.JButton updateAirplaneBtn;
    private javax.swing.JButton updateChangesBtn;
    private javax.swing.JTable viewAirplaneTable;
    private javax.swing.JButton viewDetailsBtn;
    private javax.swing.JLabel viewPanelHeader;
    private javax.swing.JScrollPane viewScrollPane;
    private com.toedter.calendar.JYearChooser yearManuChooser;
    private javax.swing.JLabel yearManuLabel;
    // End of variables declaration//GEN-END:variables
}
